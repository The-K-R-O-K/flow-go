// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockprovider

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// Provide provides a mock function with given fields: ctx, blockHeight, executionData
func (_m *Provider) Provide(ctx context.Context, blockHeight uint64, executionData *execution_data.BlockExecutionData) (flow.Identifier, *execution_data.BlockExecutionDataRoot, error) {
	ret := _m.Called(ctx, blockHeight, executionData)

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *execution_data.BlockExecutionData) flow.Identifier); ok {
		r0 = rf(ctx, blockHeight, executionData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	var r1 *execution_data.BlockExecutionDataRoot
	if rf, ok := ret.Get(1).(func(context.Context, uint64, *execution_data.BlockExecutionData) *execution_data.BlockExecutionDataRoot); ok {
		r1 = rf(ctx, blockHeight, executionData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*execution_data.BlockExecutionDataRoot)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint64, *execution_data.BlockExecutionData) error); ok {
		r2 = rf(ctx, blockHeight, executionData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t mockConstructorTestingTNewProvider) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
