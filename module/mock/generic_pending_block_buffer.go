// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// GenericPendingBlockBuffer is an autogenerated mock type for the GenericPendingBlockBuffer type
type GenericPendingBlockBuffer[P flow.GenericPayload] struct {
	mock.Mock
}

// Add provides a mock function with given fields: originID, block
func (_m *GenericPendingBlockBuffer[P]) Add(originID flow.Identifier, block *flow.GenericBlock[P]) bool {
	ret := _m.Called(originID, block)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, *flow.GenericBlock[P]) bool); ok {
		r0 = rf(originID, block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ByID provides a mock function with given fields: blockID
func (_m *GenericPendingBlockBuffer[P]) ByID(blockID flow.Identifier) (flow.Slashable[flow.GenericBlock[P]], bool) {
	ret := _m.Called(blockID)

	var r0 flow.Slashable[flow.GenericBlock[P]]
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.Slashable[flow.GenericBlock[P]]); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(flow.Slashable[flow.GenericBlock[P]])
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ByParentID provides a mock function with given fields: parentID
func (_m *GenericPendingBlockBuffer[P]) ByParentID(parentID flow.Identifier) ([]flow.Slashable[flow.GenericBlock[P]], bool) {
	ret := _m.Called(parentID)

	var r0 []flow.Slashable[flow.GenericBlock[P]]
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.Slashable[flow.GenericBlock[P]]); ok {
		r0 = rf(parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Slashable[flow.GenericBlock[P]])
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(parentID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// DropForParent provides a mock function with given fields: parentID
func (_m *GenericPendingBlockBuffer[P]) DropForParent(parentID flow.Identifier) {
	_m.Called(parentID)
}

// PruneByView provides a mock function with given fields: view
func (_m *GenericPendingBlockBuffer[P]) PruneByView(view uint64) {
	_m.Called(view)
}

// Size provides a mock function with given fields:
func (_m *GenericPendingBlockBuffer[P]) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

type mockConstructorTestingTNewGenericPendingBlockBuffer interface {
	mock.TestingT
	Cleanup(func())
}

// NewGenericPendingBlockBuffer creates a new instance of GenericPendingBlockBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGenericPendingBlockBuffer[P flow.GenericPayload](t mockConstructorTestingTNewGenericPendingBlockBuffer) *GenericPendingBlockBuffer[P] {
	mock := &GenericPendingBlockBuffer[P]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
