// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockinsecure

import (
	insecure "github.com/onflow/flow-go/insecure"
	mock "github.com/stretchr/testify/mock"
)

// AttackerOrchestrator is an autogenerated mock type for the AttackerOrchestrator type
type AttackerOrchestrator struct {
	mock.Mock
}

// HandleEgressEvent provides a mock function with given fields: _a0
func (_m *AttackerOrchestrator) HandleEgressEvent(_a0 *insecure.EgressEvent) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*insecure.EgressEvent) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleIngressEvent provides a mock function with given fields: _a0
func (_m *AttackerOrchestrator) HandleIngressEvent(_a0 *insecure.IngressEvent) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*insecure.IngressEvent) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: _a0
func (_m *AttackerOrchestrator) Register(_a0 insecure.OrchestratorNetwork) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewAttackerOrchestrator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttackerOrchestrator creates a new instance of AttackerOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttackerOrchestrator(t mockConstructorTestingTNewAttackerOrchestrator) *AttackerOrchestrator {
	mock := &AttackerOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
