// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network.proto

package insecure

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protocol int32

const (
	Protocol_UNKNOWN   Protocol = 0
	Protocol_UNICAST   Protocol = 1
	Protocol_MULTICAST Protocol = 2
	Protocol_PUBLISH   Protocol = 3
)

var Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNICAST",
	2: "MULTICAST",
	3: "PUBLISH",
}

var Protocol_value = map[string]int32{
	"UNKNOWN":   0,
	"UNICAST":   1,
	"MULTICAST": 2,
	"PUBLISH":   3,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

// Message represents the messages exchanged between the CorruptNetwork (server) and Attacker (client).
// This is a wrapper for both egress and ingress messages.
type Message struct {
	Egress               *EgressMessage           `protobuf:"bytes,1,opt,name=Egress,proto3" json:"Egress,omitempty"`
	Ingress              *IngressMessage          `protobuf:"bytes,2,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	GossipSubEgress      *GossipSubEgressMessage  `protobuf:"bytes,3,opt,name=GossipSubEgress,proto3" json:"GossipSubEgress,omitempty"`
	GossipSubIngress     *GossipSubIngressMessage `protobuf:"bytes,4,opt,name=GossipSubIngress,proto3" json:"GossipSubIngress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetEgress() *EgressMessage {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *Message) GetIngress() *IngressMessage {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *Message) GetGossipSubEgress() *GossipSubEgressMessage {
	if m != nil {
		return m.GossipSubEgress
	}
	return nil
}

func (m *Message) GetGossipSubIngress() *GossipSubIngressMessage {
	if m != nil {
		return m.GossipSubIngress
	}
	return nil
}

// EgressMessage represents an outgoing message from a corrupt node to another (honest or corrupt) node.
// The exchanged message is between the CorruptConduitFactory and Attacker.
type EgressMessage struct {
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	// CorruptOriginID represents the corrupt node id where the outgoing message is coming from.
	CorruptOriginID      []byte   `protobuf:"bytes,2,opt,name=CorruptOriginID,proto3" json:"CorruptOriginID,omitempty"`
	TargetNum            uint32   `protobuf:"varint,3,opt,name=TargetNum,proto3" json:"TargetNum,omitempty"`
	TargetIDs            [][]byte `protobuf:"bytes,4,rep,name=TargetIDs,proto3" json:"TargetIDs,omitempty"`
	Payload              []byte   `protobuf:"bytes,5,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Protocol             Protocol `protobuf:"varint,6,opt,name=protocol,proto3,enum=net.Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EgressMessage) Reset()         { *m = EgressMessage{} }
func (m *EgressMessage) String() string { return proto.CompactTextString(m) }
func (*EgressMessage) ProtoMessage()    {}
func (*EgressMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}

func (m *EgressMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EgressMessage.Unmarshal(m, b)
}
func (m *EgressMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EgressMessage.Marshal(b, m, deterministic)
}
func (m *EgressMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EgressMessage.Merge(m, src)
}
func (m *EgressMessage) XXX_Size() int {
	return xxx_messageInfo_EgressMessage.Size(m)
}
func (m *EgressMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EgressMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EgressMessage proto.InternalMessageInfo

func (m *EgressMessage) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *EgressMessage) GetCorruptOriginID() []byte {
	if m != nil {
		return m.CorruptOriginID
	}
	return nil
}

func (m *EgressMessage) GetTargetNum() uint32 {
	if m != nil {
		return m.TargetNum
	}
	return 0
}

func (m *EgressMessage) GetTargetIDs() [][]byte {
	if m != nil {
		return m.TargetIDs
	}
	return nil
}

func (m *EgressMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EgressMessage) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNKNOWN
}

// IngressMessage represents an incoming message from another node (honest or corrupt) to a corrupt node.
type IngressMessage struct {
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	// OriginID represents the node id where the incoming message is coming from - that node could be corrupt or honest.
	OriginID             []byte   `protobuf:"bytes,2,opt,name=OriginID,proto3" json:"OriginID,omitempty"`
	CorruptTargetID      []byte   `protobuf:"bytes,3,opt,name=CorruptTargetID,proto3" json:"CorruptTargetID,omitempty"`
	Payload              []byte   `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngressMessage) Reset()         { *m = IngressMessage{} }
func (m *IngressMessage) String() string { return proto.CompactTextString(m) }
func (*IngressMessage) ProtoMessage()    {}
func (*IngressMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}

func (m *IngressMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressMessage.Unmarshal(m, b)
}
func (m *IngressMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressMessage.Marshal(b, m, deterministic)
}
func (m *IngressMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressMessage.Merge(m, src)
}
func (m *IngressMessage) XXX_Size() int {
	return xxx_messageInfo_IngressMessage.Size(m)
}
func (m *IngressMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IngressMessage proto.InternalMessageInfo

func (m *IngressMessage) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *IngressMessage) GetOriginID() []byte {
	if m != nil {
		return m.OriginID
	}
	return nil
}

func (m *IngressMessage) GetCorruptTargetID() []byte {
	if m != nil {
		return m.CorruptTargetID
	}
	return nil
}

func (m *IngressMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type GossipSubEgressMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipSubEgressMessage) Reset()         { *m = GossipSubEgressMessage{} }
func (m *GossipSubEgressMessage) String() string { return proto.CompactTextString(m) }
func (*GossipSubEgressMessage) ProtoMessage()    {}
func (*GossipSubEgressMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{3}
}

func (m *GossipSubEgressMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipSubEgressMessage.Unmarshal(m, b)
}
func (m *GossipSubEgressMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipSubEgressMessage.Marshal(b, m, deterministic)
}
func (m *GossipSubEgressMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipSubEgressMessage.Merge(m, src)
}
func (m *GossipSubEgressMessage) XXX_Size() int {
	return xxx_messageInfo_GossipSubEgressMessage.Size(m)
}
func (m *GossipSubEgressMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipSubEgressMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GossipSubEgressMessage proto.InternalMessageInfo

type GossipSubIngressMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipSubIngressMessage) Reset()         { *m = GossipSubIngressMessage{} }
func (m *GossipSubIngressMessage) String() string { return proto.CompactTextString(m) }
func (*GossipSubIngressMessage) ProtoMessage()    {}
func (*GossipSubIngressMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{4}
}

func (m *GossipSubIngressMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipSubIngressMessage.Unmarshal(m, b)
}
func (m *GossipSubIngressMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipSubIngressMessage.Marshal(b, m, deterministic)
}
func (m *GossipSubIngressMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipSubIngressMessage.Merge(m, src)
}
func (m *GossipSubIngressMessage) XXX_Size() int {
	return xxx_messageInfo_GossipSubIngressMessage.Size(m)
}
func (m *GossipSubIngressMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipSubIngressMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GossipSubIngressMessage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("net.Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*Message)(nil), "net.Message")
	proto.RegisterType((*EgressMessage)(nil), "net.EgressMessage")
	proto.RegisterType((*IngressMessage)(nil), "net.IngressMessage")
	proto.RegisterType((*GossipSubEgressMessage)(nil), "net.GossipSubEgressMessage")
	proto.RegisterType((*GossipSubIngressMessage)(nil), "net.GossipSubIngressMessage")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x36, 0x25, 0x1f, 0xd3, 0x38, 0x8d, 0x16, 0x29, 0x98, 0xb4, 0x87, 0xca, 0x27, 0x53,
	0x09, 0x17, 0x85, 0x23, 0x17, 0x9a, 0x0f, 0x51, 0x8b, 0xd6, 0x8d, 0x9c, 0x44, 0x48, 0xdc, 0x1c,
	0xb3, 0x18, 0xab, 0xee, 0xae, 0xb5, 0xbb, 0x16, 0xea, 0x9f, 0x40, 0xe2, 0xdf, 0xf1, 0x47, 0xb8,
	0x23, 0xaf, 0xbd, 0x71, 0x6d, 0xa8, 0x38, 0xce, 0x9b, 0xf7, 0x66, 0xdf, 0xdb, 0xd1, 0x80, 0x41,
	0x89, 0xfc, 0xce, 0xf8, 0x9d, 0x93, 0x72, 0x26, 0x19, 0x6e, 0x53, 0x22, 0x27, 0x27, 0x11, 0x63,
	0x51, 0x42, 0x2e, 0x14, 0xb4, 0xcb, 0xbe, 0x5e, 0x90, 0xfb, 0x54, 0x3e, 0x14, 0x0c, 0xeb, 0x37,
	0x82, 0xee, 0x0d, 0x11, 0x22, 0x88, 0x08, 0x3e, 0x87, 0xce, 0x32, 0xe2, 0x44, 0x08, 0x13, 0x9d,
	0x21, 0xfb, 0x68, 0x8a, 0x1d, 0x4a, 0xa4, 0x53, 0x40, 0x25, 0xc7, 0x2f, 0x19, 0xf8, 0x35, 0x74,
	0x5d, 0x5a, 0x90, 0x0f, 0x14, 0xf9, 0xb9, 0x22, 0x97, 0x98, 0x66, 0x6b, 0x0e, 0x5e, 0xc2, 0xf1,
	0x07, 0x26, 0x44, 0x9c, 0xae, 0xb3, 0x5d, 0xf9, 0x46, 0x5b, 0xc9, 0x4e, 0x94, 0xac, 0xd1, 0xd3,
	0xf2, 0xa6, 0x06, 0x5f, 0xc1, 0x68, 0x0f, 0xe9, 0xe7, 0x0f, 0xd5, 0x9c, 0xd3, 0xfa, 0x9c, 0x86,
	0x8f, 0xbf, 0x54, 0xd6, 0x2f, 0x04, 0x46, 0xed, 0x31, 0x7c, 0x0a, 0xfd, 0xf9, 0xb7, 0x80, 0x52,
	0x92, 0xb8, 0x0b, 0xf5, 0x01, 0x7d, 0xbf, 0x02, 0xb0, 0x0d, 0xc7, 0x73, 0xc6, 0x79, 0x96, 0xca,
	0x5b, 0x1e, 0x47, 0x31, 0x75, 0x17, 0x2a, 0xf7, 0xc0, 0x6f, 0xc2, 0xf9, 0x9c, 0x4d, 0xc0, 0x23,
	0x22, 0xbd, 0xec, 0x5e, 0x85, 0x34, 0xfc, 0x0a, 0xa8, 0xba, 0xee, 0x22, 0xb7, 0xde, 0xb6, 0x07,
	0x7e, 0x05, 0x60, 0x13, 0xba, 0xab, 0xe0, 0x21, 0x61, 0xc1, 0x17, 0xf3, 0x99, 0x9a, 0xae, 0x4b,
	0xfc, 0x0a, 0x7a, 0x6a, 0x61, 0x21, 0x4b, 0xcc, 0xce, 0x19, 0xb2, 0x87, 0x53, 0x43, 0x25, 0x5e,
	0x95, 0xa0, 0xbf, 0x6f, 0x5b, 0x3f, 0x10, 0x0c, 0xeb, 0xf9, 0xff, 0x93, 0x6d, 0x02, 0xbd, 0x46,
	0xa8, 0x7d, 0xfd, 0x28, 0xb7, 0x76, 0xa9, 0x32, 0x55, 0xb9, 0x35, 0xfc, 0xd8, 0xfb, 0x61, 0xcd,
	0xbb, 0x65, 0xc2, 0xf8, 0xdf, 0x0b, 0xb6, 0x5e, 0xc2, 0x8b, 0x27, 0x56, 0x76, 0xfe, 0x1e, 0x7a,
	0x3a, 0x1b, 0x3e, 0x82, 0xee, 0xd6, 0xfb, 0xe8, 0xdd, 0x7e, 0xf2, 0x46, 0xad, 0xa2, 0x70, 0xe7,
	0x97, 0xeb, 0xcd, 0x08, 0x61, 0x03, 0xfa, 0x37, 0xdb, 0xeb, 0x4d, 0x51, 0x1e, 0xe4, 0xbd, 0xd5,
	0x76, 0x76, 0xed, 0xae, 0xaf, 0x46, 0xed, 0xe9, 0x4f, 0x04, 0xc3, 0xd2, 0xa4, 0x57, 0x5c, 0x05,
	0x7e, 0x97, 0xa7, 0xa1, 0x94, 0x84, 0xf2, 0x52, 0xca, 0x20, 0xbc, 0x23, 0x1c, 0x8f, 0x9d, 0xe2,
	0x3c, 0x1c, 0x7d, 0x1e, 0xce, 0x32, 0x3f, 0x8f, 0xc9, 0x40, 0x7d, 0xaf, 0x36, 0xda, 0x7a, 0x83,
	0xf0, 0x0c, 0xc6, 0x2b, 0xce, 0x42, 0x22, 0x84, 0x16, 0xeb, 0xef, 0xad, 0x71, 0x27, 0x4f, 0x4c,
	0xb4, 0x5a, 0x36, 0x9a, 0xc1, 0xe7, 0x5e, 0x4c, 0x05, 0x09, 0x33, 0x4e, 0x76, 0x1d, 0xd5, 0x7f,
	0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x70, 0x14, 0x9d, 0x48, 0xb4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CorruptNetworkClient is the client API for CorruptNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CorruptNetworkClient interface {
	// ConnectAttacker registers an attacker to the corrupt network.
	ConnectAttacker(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CorruptNetwork_ConnectAttackerClient, error)
	// ProcessAttackerMessage is the central place for the corrupt network to process messages from an attacker.
	ProcessAttackerMessage(ctx context.Context, opts ...grpc.CallOption) (CorruptNetwork_ProcessAttackerMessageClient, error)
}

type corruptNetworkClient struct {
	cc *grpc.ClientConn
}

func NewCorruptNetworkClient(cc *grpc.ClientConn) CorruptNetworkClient {
	return &corruptNetworkClient{cc}
}

func (c *corruptNetworkClient) ConnectAttacker(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CorruptNetwork_ConnectAttackerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CorruptNetwork_serviceDesc.Streams[0], "/net.CorruptNetwork/ConnectAttacker", opts...)
	if err != nil {
		return nil, err
	}
	x := &corruptNetworkConnectAttackerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CorruptNetwork_ConnectAttackerClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type corruptNetworkConnectAttackerClient struct {
	grpc.ClientStream
}

func (x *corruptNetworkConnectAttackerClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *corruptNetworkClient) ProcessAttackerMessage(ctx context.Context, opts ...grpc.CallOption) (CorruptNetwork_ProcessAttackerMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CorruptNetwork_serviceDesc.Streams[1], "/net.CorruptNetwork/ProcessAttackerMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &corruptNetworkProcessAttackerMessageClient{stream}
	return x, nil
}

type CorruptNetwork_ProcessAttackerMessageClient interface {
	Send(*Message) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type corruptNetworkProcessAttackerMessageClient struct {
	grpc.ClientStream
}

func (x *corruptNetworkProcessAttackerMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *corruptNetworkProcessAttackerMessageClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CorruptNetworkServer is the server API for CorruptNetwork service.
type CorruptNetworkServer interface {
	// ConnectAttacker registers an attacker to the corrupt network.
	ConnectAttacker(*emptypb.Empty, CorruptNetwork_ConnectAttackerServer) error
	// ProcessAttackerMessage is the central place for the corrupt network to process messages from an attacker.
	ProcessAttackerMessage(CorruptNetwork_ProcessAttackerMessageServer) error
}

// UnimplementedCorruptNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedCorruptNetworkServer struct {
}

func (*UnimplementedCorruptNetworkServer) ConnectAttacker(req *emptypb.Empty, srv CorruptNetwork_ConnectAttackerServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectAttacker not implemented")
}
func (*UnimplementedCorruptNetworkServer) ProcessAttackerMessage(srv CorruptNetwork_ProcessAttackerMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessAttackerMessage not implemented")
}

func RegisterCorruptNetworkServer(s *grpc.Server, srv CorruptNetworkServer) {
	s.RegisterService(&_CorruptNetwork_serviceDesc, srv)
}

func _CorruptNetwork_ConnectAttacker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CorruptNetworkServer).ConnectAttacker(m, &corruptNetworkConnectAttackerServer{stream})
}

type CorruptNetwork_ConnectAttackerServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type corruptNetworkConnectAttackerServer struct {
	grpc.ServerStream
}

func (x *corruptNetworkConnectAttackerServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _CorruptNetwork_ProcessAttackerMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CorruptNetworkServer).ProcessAttackerMessage(&corruptNetworkProcessAttackerMessageServer{stream})
}

type CorruptNetwork_ProcessAttackerMessageServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type corruptNetworkProcessAttackerMessageServer struct {
	grpc.ServerStream
}

func (x *corruptNetworkProcessAttackerMessageServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *corruptNetworkProcessAttackerMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CorruptNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.CorruptNetwork",
	HandlerType: (*CorruptNetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectAttacker",
			Handler:       _CorruptNetwork_ConnectAttacker_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessAttackerMessage",
			Handler:       _CorruptNetwork_ProcessAttackerMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "network.proto",
}
