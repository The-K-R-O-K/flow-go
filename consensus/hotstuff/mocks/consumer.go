// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"

	time "time"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// OnBlockIncorporated provides a mock function with given fields: _a0
func (_m *Consumer) OnBlockIncorporated(_a0 *model.Block) {
	_m.Called(_a0)
}

// OnDoubleProposeDetected provides a mock function with given fields: _a0, _a1
func (_m *Consumer) OnDoubleProposeDetected(_a0 *model.Block, _a1 *model.Block) {
	_m.Called(_a0, _a1)
}

// OnDoubleTimeoutDetected provides a mock function with given fields: _a0, _a1
func (_m *Consumer) OnDoubleTimeoutDetected(_a0 *model.TimeoutObject, _a1 *model.TimeoutObject) {
	_m.Called(_a0, _a1)
}

// OnDoubleVotingDetected provides a mock function with given fields: _a0, _a1
func (_m *Consumer) OnDoubleVotingDetected(_a0 *model.Vote, _a1 *model.Vote) {
	_m.Called(_a0, _a1)
}

// OnEventProcessed provides a mock function with given fields:
func (_m *Consumer) OnEventProcessed() {
	_m.Called()
}

// OnFinalizedBlock provides a mock function with given fields: _a0
func (_m *Consumer) OnFinalizedBlock(_a0 *model.Block) {
	_m.Called(_a0)
}

// OnInvalidTimeoutDetected provides a mock function with given fields: _a0
func (_m *Consumer) OnInvalidTimeoutDetected(_a0 *model.TimeoutObject) {
	_m.Called(_a0)
}

// OnInvalidVoteDetected provides a mock function with given fields: _a0
func (_m *Consumer) OnInvalidVoteDetected(_a0 *model.Vote) {
	_m.Called(_a0)
}

// OnLocalTimeout provides a mock function with given fields: currentView
func (_m *Consumer) OnLocalTimeout(currentView uint64) {
	_m.Called(currentView)
}

// OnOwnProposal provides a mock function with given fields: proposal, targetPublicationTime
func (_m *Consumer) OnOwnProposal(proposal *flow.Header, targetPublicationTime time.Time) {
	_m.Called(proposal, targetPublicationTime)
}

// OnOwnTimeout provides a mock function with given fields: timeout
func (_m *Consumer) OnOwnTimeout(timeout *model.TimeoutObject) {
	_m.Called(timeout)
}

// OnOwnVote provides a mock function with given fields: blockID, view, sigData, recipientID
func (_m *Consumer) OnOwnVote(blockID flow.Identifier, view uint64, sigData []byte, recipientID flow.Identifier) {
	_m.Called(blockID, view, sigData, recipientID)
}

// OnPartialTc provides a mock function with given fields: currentView, partialTc
func (_m *Consumer) OnPartialTc(currentView uint64, partialTc *hotstuff.PartialTcCreated) {
	_m.Called(currentView, partialTc)
}

// OnQcTriggeredViewChange provides a mock function with given fields: qc, newView
func (_m *Consumer) OnQcTriggeredViewChange(qc *flow.QuorumCertificate, newView uint64) {
	_m.Called(qc, newView)
}

// OnReceiveProposal provides a mock function with given fields: currentView, proposal
func (_m *Consumer) OnReceiveProposal(currentView uint64, proposal *model.Proposal) {
	_m.Called(currentView, proposal)
}

// OnReceiveQc provides a mock function with given fields: currentView, qc
func (_m *Consumer) OnReceiveQc(currentView uint64, qc *flow.QuorumCertificate) {
	_m.Called(currentView, qc)
}

// OnReceiveTc provides a mock function with given fields: currentView, tc
func (_m *Consumer) OnReceiveTc(currentView uint64, tc *flow.TimeoutCertificate) {
	_m.Called(currentView, tc)
}

// OnStart provides a mock function with given fields: currentView
func (_m *Consumer) OnStart(currentView uint64) {
	_m.Called(currentView)
}

// OnStartingTimeout provides a mock function with given fields: _a0
func (_m *Consumer) OnStartingTimeout(_a0 model.TimerInfo) {
	_m.Called(_a0)
}

// OnTcTriggeredViewChange provides a mock function with given fields: tc, newView
func (_m *Consumer) OnTcTriggeredViewChange(tc *flow.TimeoutCertificate, newView uint64) {
	_m.Called(tc, newView)
}

// OnViewChange provides a mock function with given fields: oldView, newView
func (_m *Consumer) OnViewChange(oldView uint64, newView uint64) {
	_m.Called(oldView, newView)
}

// OnVoteForInvalidBlockDetected provides a mock function with given fields: vote, invalidProposal
func (_m *Consumer) OnVoteForInvalidBlockDetected(vote *model.Vote, invalidProposal *model.Proposal) {
	_m.Called(vote, invalidProposal)
}

type mockConstructorTestingTNewConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumer(t mockConstructorTestingTNewConsumer) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
