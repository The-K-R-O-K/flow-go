// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package checkpoint

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CheckpointHeader struct {
	_tab flatbuffers.Table
}

func GetRootAsCheckpointHeader(buf []byte, offset flatbuffers.UOffsetT) *CheckpointHeader {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CheckpointHeader{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCheckpointHeader(buf []byte, offset flatbuffers.UOffsetT) *CheckpointHeader {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CheckpointHeader{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CheckpointHeader) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CheckpointHeader) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CheckpointHeader) Version() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointHeader) MutateVersion(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *CheckpointHeader) SubtrieCount() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointHeader) MutateSubtrieCount(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *CheckpointHeader) SubtrieChecksums(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CheckpointHeader) SubtrieChecksumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CheckpointHeader) MutateSubtrieChecksums(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CheckpointHeader) TopLevelTrieChecksum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointHeader) MutateTopLevelTrieChecksum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func CheckpointHeaderStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CheckpointHeaderAddVersion(builder *flatbuffers.Builder, version uint16) {
	builder.PrependUint16Slot(0, version, 0)
}
func CheckpointHeaderAddSubtrieCount(builder *flatbuffers.Builder, subtrieCount uint16) {
	builder.PrependUint16Slot(1, subtrieCount, 0)
}
func CheckpointHeaderAddSubtrieChecksums(builder *flatbuffers.Builder, subtrieChecksums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(subtrieChecksums), 0)
}
func CheckpointHeaderStartSubtrieChecksumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CheckpointHeaderAddTopLevelTrieChecksum(builder *flatbuffers.Builder, topLevelTrieChecksum uint32) {
	builder.PrependUint32Slot(3, topLevelTrieChecksum, 0)
}
func CheckpointHeaderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
