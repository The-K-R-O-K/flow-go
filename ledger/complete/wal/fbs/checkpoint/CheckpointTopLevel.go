// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package checkpoint

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CheckpointTopLevel struct {
	_tab flatbuffers.Table
}

func GetRootAsCheckpointTopLevel(buf []byte, offset flatbuffers.UOffsetT) *CheckpointTopLevel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CheckpointTopLevel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCheckpointTopLevel(buf []byte, offset flatbuffers.UOffsetT) *CheckpointTopLevel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CheckpointTopLevel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CheckpointTopLevel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CheckpointTopLevel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CheckpointTopLevel) Version() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointTopLevel) MutateVersion(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *CheckpointTopLevel) SubtrieNodeCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointTopLevel) MutateSubtrieNodeCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *CheckpointTopLevel) TopLevelNodes(obj *Node, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CheckpointTopLevel) TopLevelNodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CheckpointTopLevel) TrieRoots(obj *Trie, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CheckpointTopLevel) TrieRootsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CheckpointTopLevel) NodeCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointTopLevel) MutateNodeCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *CheckpointTopLevel) TrieCount() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointTopLevel) MutateTrieCount(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func CheckpointTopLevelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CheckpointTopLevelAddVersion(builder *flatbuffers.Builder, version uint16) {
	builder.PrependUint16Slot(0, version, 0)
}
func CheckpointTopLevelAddSubtrieNodeCount(builder *flatbuffers.Builder, subtrieNodeCount uint64) {
	builder.PrependUint64Slot(1, subtrieNodeCount, 0)
}
func CheckpointTopLevelAddTopLevelNodes(builder *flatbuffers.Builder, topLevelNodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(topLevelNodes), 0)
}
func CheckpointTopLevelStartTopLevelNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CheckpointTopLevelAddTrieRoots(builder *flatbuffers.Builder, trieRoots flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(trieRoots), 0)
}
func CheckpointTopLevelStartTrieRootsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CheckpointTopLevelAddNodeCount(builder *flatbuffers.Builder, nodeCount uint64) {
	builder.PrependUint64Slot(4, nodeCount, 0)
}
func CheckpointTopLevelAddTrieCount(builder *flatbuffers.Builder, trieCount uint16) {
	builder.PrependUint16Slot(5, trieCount, 0)
}
func CheckpointTopLevelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
