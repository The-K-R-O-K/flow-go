// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package checkpoint

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CheckpointSubtrie struct {
	_tab flatbuffers.Table
}

func GetRootAsCheckpointSubtrie(buf []byte, offset flatbuffers.UOffsetT) *CheckpointSubtrie {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CheckpointSubtrie{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCheckpointSubtrie(buf []byte, offset flatbuffers.UOffsetT) *CheckpointSubtrie {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CheckpointSubtrie{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CheckpointSubtrie) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CheckpointSubtrie) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CheckpointSubtrie) Version() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointSubtrie) MutateVersion(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *CheckpointSubtrie) Nodes(obj *Node, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CheckpointSubtrie) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CheckpointSubtrie) NodeCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CheckpointSubtrie) MutateNodeCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func CheckpointSubtrieStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CheckpointSubtrieAddVersion(builder *flatbuffers.Builder, version uint16) {
	builder.PrependUint16Slot(0, version, 0)
}
func CheckpointSubtrieAddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nodes), 0)
}
func CheckpointSubtrieStartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CheckpointSubtrieAddNodeCount(builder *flatbuffers.Builder, nodeCount uint64) {
	builder.PrependUint64Slot(2, nodeCount, 0)
}
func CheckpointSubtrieEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
