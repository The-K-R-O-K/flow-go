// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	state "github.com/onflow/flow-go/engine/execution/state"
)

// ReadOnlyRegisterStorage is an autogenerated mock type for the ReadOnlyRegisterStorage type
type ReadOnlyRegisterStorage struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *ReadOnlyRegisterStorage) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// NewStorageSnapshot provides a mock function with given fields: commitment
func (_m *ReadOnlyRegisterStorage) NewStorageSnapshot(commitment flow.StateCommitment) state.SnapshotReader {
	ret := _m.Called(commitment)

	var r0 state.SnapshotReader
	if rf, ok := ret.Get(0).(func(flow.StateCommitment) state.SnapshotReader); ok {
		r0 = rf(commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.SnapshotReader)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *ReadOnlyRegisterStorage) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// SnapshotReaderAtBlock provides a mock function with given fields: blockID
func (_m *ReadOnlyRegisterStorage) SnapshotReaderAtBlock(blockID flow.Identifier) (state.SnapshotReader, error) {
	ret := _m.Called(blockID)

	var r0 state.SnapshotReader
	if rf, ok := ret.Get(0).(func(flow.Identifier) state.SnapshotReader); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.SnapshotReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReadOnlyRegisterStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewReadOnlyRegisterStorage creates a new instance of ReadOnlyRegisterStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReadOnlyRegisterStorage(t mockConstructorTestingTNewReadOnlyRegisterStorage) *ReadOnlyRegisterStorage {
	mock := &ReadOnlyRegisterStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
