// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	state "github.com/onflow/flow-go/engine/execution/state"
)

// SnapshotReader is an autogenerated mock type for the SnapshotReader type
type SnapshotReader struct {
	mock.Mock
}

// BatchRead provides a mock function with given fields: ids
func (_m *SnapshotReader) BatchRead(ids []flow.RegisterID) (state.Iterator, error) {
	ret := _m.Called(ids)

	var r0 state.Iterator
	if rf, ok := ret.Get(0).(func([]flow.RegisterID) state.Iterator); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.Iterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]flow.RegisterID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *SnapshotReader) Get(id flow.RegisterID) ([]byte, error) {
	ret := _m.Called(id)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(flow.RegisterID) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.RegisterID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSnapshotReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewSnapshotReader creates a new instance of SnapshotReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSnapshotReader(t mockConstructorTestingTNewSnapshotReader) *SnapshotReader {
	mock := &SnapshotReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
