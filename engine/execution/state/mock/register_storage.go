// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	delta "github.com/onflow/flow-go/engine/execution/state/delta"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	state "github.com/onflow/flow-go/engine/execution/state"
)

// RegisterStorage is an autogenerated mock type for the RegisterStorage type
type RegisterStorage struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *RegisterStorage) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// NewStorageSnapshot provides a mock function with given fields: commitment
func (_m *RegisterStorage) NewStorageSnapshot(commitment flow.StateCommitment) state.SnapshotReader {
	ret := _m.Called(commitment)

	var r0 state.SnapshotReader
	if rf, ok := ret.Get(0).(func(flow.StateCommitment) state.SnapshotReader); ok {
		r0 = rf(commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.SnapshotReader)
		}
	}

	return r0
}

// OnBlockExecuted provides a mock function with given fields: block, _a1
func (_m *RegisterStorage) OnBlockExecuted(block *flow.Header, _a1 delta.SpockSnapshot) error {
	ret := _m.Called(block, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Header, delta.SpockSnapshot) error); ok {
		r0 = rf(block, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnFinalizedBlock provides a mock function with given fields: block
func (_m *RegisterStorage) OnFinalizedBlock(block *flow.Header) {
	_m.Called(block)
}

// OnSealedBlock provides a mock function with given fields: block
func (_m *RegisterStorage) OnSealedBlock(block *flow.Header) {
	_m.Called(block)
}

// Ready provides a mock function with given fields:
func (_m *RegisterStorage) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// SnapshotReaderAtBlock provides a mock function with given fields: blockID
func (_m *RegisterStorage) SnapshotReaderAtBlock(blockID flow.Identifier) (state.SnapshotReader, error) {
	ret := _m.Called(blockID)

	var r0 state.SnapshotReader
	if rf, ok := ret.Get(0).(func(flow.Identifier) state.SnapshotReader); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.SnapshotReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegisterStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterStorage creates a new instance of RegisterStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterStorage(t mockConstructorTestingTNewRegisterStorage) *RegisterStorage {
	mock := &RegisterStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
