// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// OnDiskRegisterStore is an autogenerated mock type for the OnDiskRegisterStore type
type OnDiskRegisterStore struct {
	mock.Mock
}

// GetRegister provides a mock function with given fields: height, register
func (_m *OnDiskRegisterStore) GetRegister(height uint64, register flow.RegisterID) ([]byte, error) {
	ret := _m.Called(height, register)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.RegisterID) ([]byte, error)); ok {
		return rf(height, register)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.RegisterID) []byte); ok {
		r0 = rf(height, register)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.RegisterID) error); ok {
		r1 = rf(height, register)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Latest provides a mock function with given fields:
func (_m *OnDiskRegisterStore) Latest() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// SaveRegisters provides a mock function with given fields: height, registers
func (_m *OnDiskRegisterStore) SaveRegisters(height uint64, registers []flow.RegisterEntry) error {
	ret := _m.Called(height, registers)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []flow.RegisterEntry) error); ok {
		r0 = rf(height, registers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOnDiskRegisterStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOnDiskRegisterStore creates a new instance of OnDiskRegisterStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOnDiskRegisterStore(t mockConstructorTestingTNewOnDiskRegisterStore) *OnDiskRegisterStore {
	mock := &OnDiskRegisterStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
