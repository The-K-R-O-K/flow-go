// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	channels "github.com/onflow/flow-go/network/channels"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// ConduitFactory is an autogenerated mock type for the ConduitFactory type
type ConduitFactory struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *ConduitFactory) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// NewConduit provides a mock function with given fields: _a0, _a1
func (_m *ConduitFactory) NewConduit(_a0 context.Context, _a1 channels.Channel) (network.Conduit, error) {
	ret := _m.Called(_a0, _a1)

	var r0 network.Conduit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) (network.Conduit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) network.Conduit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Conduit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Channel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ready provides a mock function with given fields:
func (_m *ConduitFactory) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// RegisterAdapter provides a mock function with given fields: _a0
func (_m *ConduitFactory) RegisterAdapter(_a0 network.Adapter) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(network.Adapter) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *ConduitFactory) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewConduitFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewConduitFactory creates a new instance of ConduitFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConduitFactory(t mockConstructorTestingTNewConduitFactory) *ConduitFactory {
	mock := &ConduitFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
