// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// ExecutionDataTracker is an autogenerated mock type for the ExecutionDataTracker type
type ExecutionDataTracker struct {
	mock.Mock
}

// GetFulfilledHeight provides a mock function with given fields:
func (_m *ExecutionDataTracker) GetFulfilledHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFulfilledHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrunedHeight provides a mock function with given fields:
func (_m *ExecutionDataTracker) GetPrunedHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrunedHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PruneUpToHeight provides a mock function with given fields: height
func (_m *ExecutionDataTracker) PruneUpToHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for PruneUpToHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFulfilledHeight provides a mock function with given fields: height
func (_m *ExecutionDataTracker) SetFulfilledHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for SetFulfilledHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *ExecutionDataTracker) Update(_a0 storage.UpdateFn) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.UpdateFn) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExecutionDataTracker creates a new instance of ExecutionDataTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionDataTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionDataTracker {
	mock := &ExecutionDataTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
