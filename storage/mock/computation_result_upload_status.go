// Code generated by mockery v2.13.0. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// ComputationResultUploadStatus is an autogenerated mock type for the ComputationResultUploadStatus type
type ComputationResultUploadStatus struct {
	mock.Mock
}

// ByID provides a mock function with given fields: computationResultID
func (_m *ComputationResultUploadStatus) ByID(computationResultID flow.Identifier) (bool, error) {
	ret := _m.Called(computationResultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(computationResultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(computationResultID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIDs provides a mock function with given fields:
func (_m *ComputationResultUploadStatus) GetAllIDs() ([]flow.Identifier, error) {
	ret := _m.Called()

	var r0 []flow.Identifier
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: computationResultID
func (_m *ComputationResultUploadStatus) Remove(computationResultID flow.Identifier) error {
	ret := _m.Called(computationResultID)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(computationResultID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: computationResultID, wasUploadCompleted
func (_m *ComputationResultUploadStatus) Store(computationResultID flow.Identifier, wasUploadCompleted bool) error {
	ret := _m.Called(computationResultID, wasUploadCompleted)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, bool) error); ok {
		r0 = rf(computationResultID, wasUploadCompleted)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewComputationResultUploadStatusT interface {
	mock.TestingT
	Cleanup(func())
}

// NewComputationResultUploadStatus creates a new instance of ComputationResultUploadStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewComputationResultUploadStatus(t NewComputationResultUploadStatusT) *ComputationResultUploadStatus {
	mock := &ComputationResultUploadStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
